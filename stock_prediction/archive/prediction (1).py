# -*- coding: utf-8 -*-
"""prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1olXYdwc6DLdk-JMj8WwSbJe6Adr8-x1N
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense

df = pd.read_csv("NVidia_stock_history.csv")
print(df.head())

print(df.tail())
df.info()
# Find any Null Values
df.isnull().sum()

data = df[['Close']].values  # use close price
scaler = MinMaxScaler(feature_range=(0,1))
data_scaled = scaler.fit_transform(data)
print(df.head())

plt.figure(figsize=(14,6))
plt.plot(df['Date'], df['Close'], label="Stock Close Price")
plt.xlabel("Date")
plt.ylabel("Price")
plt.legend()
plt.show()

def create_sequences(dataset, time_step=60):
    X, y = [], []
    for i in range(len(dataset)-time_step-1):
        X.append(dataset[i:(i+time_step), 0])
        y.append(dataset[i+time_step, 0])
    return np.array(X), np.array(y)

time_step = 60  # using last 60 days to predict next day
X, y = create_sequences(data_scaled, time_step)

X = X.reshape(X.shape[0], X.shape[1], 1)

train_size = int(len(X) * 0.8)
X_train, X_test = X[:train_size], X[train_size:]
y_train, y_test = y[:train_size], y[train_size:]

model = Sequential()
model.add(LSTM(100, return_sequences=True, input_shape=(time_step,1)))
model.add(LSTM(100))
model.add(Dense(1))
model.compile(optimizer='adam', loss='mean_squared_error')

history = model.fit(X_train, y_train, validation_data=(X_test, y_test),
                    epochs=20, batch_size=64, verbose=1)

train_predict = model.predict(X_train)
test_predict = model.predict(X_test)

train_predict = scaler.inverse_transform(train_predict)
y_train_actual = scaler.inverse_transform(y_train.reshape(-1,1))
test_predict = scaler.inverse_transform(test_predict)
y_test_actual = scaler.inverse_transform(y_test.reshape(-1,1))

plt.figure(figsize=(14,6))
plt.plot(y_test_actual, label="Actual Price")
plt.plot(test_predict, label="Predicted Price")
plt.xlabel("Days")
plt.ylabel("Stock Price")
plt.legend()
plt.show()

last_sequence = data_scaled[-time_step:]
last_sequence = last_sequence.reshape(1, time_step, 1)
next_price_scaled = model.predict(last_sequence)
next_price = scaler.inverse_transform(next_price_scaled)
print("Predicted Next Stock Price:", next_price[0][0])

